---
layout: post
title: 현대 오토에버 코테 준비하기
image: 
date: 2023-06-14 16:14:20 +0200
tags: [algorithm, 현대 오토에버]
categories: algorithm
---

# 현대 오토에버 코테 준비하기

- [현대 오토에버 코테 준비하기](#현대-오토에버-코테-준비하기)
  - [1. 목적](#1-목적)
  - [2. 현대 오토에버 코테 조사 및 분석](#2-현대-오토에버-코테-조사-및-분석)
  - [3. 코드 테스트 준비과정](#3-코드-테스트-준비과정)
  - [4. 코드 테스트 결과](#4-코드-테스트-결과)

## 1. 목적
___
현대 오토에버에서의 코테 경험을 공유하는 것

## 2. 현대 오토에버 코테 조사 및 분석
___
현황
- 백준 골드 2 ~ 3 정도의 실력
- 삼성 A형 에서 두 문제 다 풀고 A+ 등급
- B형 준비 이후 1달정도 알고리즘 문제를 놓고 있었음.
- 준비가 덜 된 상태로 지원하여 서류 탈락을 예상하고 다른 공부를 하던 중 서류 합격 통보를 받고 2일 동안 급하게 준비하게 됨.

현대 오토에버 코테 조사 (구글링)
- 3문제 3시간
- 2문제는 단순 구현 문제, 1문제는 시간복잡도를 신경 써야되는 구현 문제
- 기본적인 테스트가 주어지고 히든 테케가 따로 존재하는 전형적인 코테 유형이다.
- 전체적으로 난이도는 실버 2 ~ 골드 4 정도로 평가된다. (쉬운편)

## 3. 코드 테스트 준비과정
___
미리 조사한 코테 난이도에 맞추어 실버2에서 골드4 정도의 구현 문제를 다양한 주제에서 뽑아 풀어보았다. 풀어본 주제는 다음과 같다.

- 동적 계획법
- dfs
- bfs
- 그래프
- 빡센 구현 (골드 3정도..)
- 분할 정복

느낀점
1. 오랜만에 알고리즘 문제를 풀며 이전 보다 조금 노련해졌다.   
이전에는 아이디어가 떠오르면 바로 문제풀이에 들어갔지만, 삼성B형과 여러 프로젝트들을 경험하고 나서는 미리 계획하고 들어가는 것이 배우는 것도 많고 더 적합하다고 느꼈다.   
2. 현재는 문제를 풀기전에 아이디어에 대한 시간복잡도, 공간복잡도 둘다 꼼꼼하게 따지며 실효성을 점검한다. 또한 코딩에 들어가기 전에 논리 구조를 좀 더 고민해본 뒤에 들어간다. 이렇게 문제를 해결하다보니 문제 해결 속도와 정확도 둘다 향상됨을 느꼈다... 아래는 문제 해결 python 예제 코드이다.
```
"""
이름: 색종이 만들기

조건:
1. 1초, 128MB

idea:
1. 한변의 길이가 최대 128이므로 재귀를 이용하면 최악의 경우라 하더라도 128 * 128 * a 번 실행되므로 1초 안에 실행 가능하다.
    꼼꼼하게 구현하는 것이 관건이 될 것 같다.

solution:
1. 종이의 한 변의 길이 n을 입력받고, 종이의 색칠 현황을 이차 배열 형태로 입력 받는다.
2. 잘라진 흰색 종이와 파란색 종이의 개수를 pair 형태로 반환하는 함수를 작성한다.
    - 변의 길이가 1이면 (1, 0) 또는 (0, 1) 반환
    - 주어진 index 범위의 종이 색깔을 확인하여 모두 같은 색깔이면 pair 반환
    - 모두 같은 색깔이 아닐 경우 index를 분할하여 4번의 재귀 실행
3. 결과 값 출력
"""

# 1. 종이의 한 변의 길이 n을 입력받고, 종이의 색칠 현황을 이차 배열 형태로 입력 받는다.
import sys
sys.stdin = open('input.txt', 'r')

n = int(input())
paper = [list(map(int, input().split())) for _ in range(n)]


# 2. 잘라진 흰색 종이와 파란색 종이의 개수를 pair 형태로 (흰색, 파랑색) 반환하는 함수를 작성한다.
def get_paper_count(r, c, size):

    if size == 1:

        if paper[r][c]:
            return 0, 1

        else:
            return 1, 0

    checker = paper[r][c]

    for temp_r in range(size):

        for temp_c in range(size):

            if paper[r + temp_r][c + temp_c] != checker:

                result = [0, 0]

                for i in [r, r+size//2]:
                    for j in [c, c+size//2]:
                        temp_white, temp_blue = get_paper_count(i, j, size//2)
                        result[0] += temp_white
                        result[1] += temp_blue

                return result[0], result[1]

    return (0, 1) if checker else (1, 0)


# 3. 결과 값 출력
white, blue = get_paper_count(0, 0, n)
print(white)
print(blue)
```

## 4. 코드 테스트 결과
최종적으로 코드테스트 및 서류전형에서 불합격 하였다. 아무래도 코드테스드에서 부족하기 보다는 포트폴리오가 많이 부족했다고 생각된다.
(사실상 포트폴리오 내용이 없었다고 봐도 무방) 이번 경험을 통해 다음과 같은 내용들을 배웠다.
1. 개발자로 지원할 때 나를 표현할 수 있는 포트폴리오는 선택이 아닌 필수다.
2. 코드테스트를 꾸준히 준비해야 한다.
